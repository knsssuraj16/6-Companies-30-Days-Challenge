// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
  void print(queue<Node*> Q){
      while(!Q.empty()){
		cout<<" "<<Q.front()->data;
		Q.pop();
	}
  }
  int bfs( Node* start, unordered_map<Node*, Node*> &parent){
      unordered_map<Node*,bool>visited;
      
      queue<Node*> q;
      
      visited[start]= true;
      q.push(start);
      int count=0;
      while(!q.empty()){
          
          int n = q.size();
            // print(q);
            // cout << endl;
          bool check = false;
          for(int i =0 ; i< n; i++){
              
             Node *temp = q.front();
             q.pop();
             
             if( temp->left != NULL && !visited[temp->left]  ){
                   visited[temp->left]= true;
                   check = true;
                 q.push(temp->left);
             }
             if( temp->right != NULL && !visited[temp->right] ){
                  check = true;
                   visited[temp->right]= true;
                 q.push(temp->right);
             }
             if(parent.find(temp) != parent.end() && !visited[parent[temp]] ){
                  check = true;
                   visited[parent[temp]]= true;
                 q.push(parent[temp]);
             }
          }
          if( check ){
              
               count++;
          }
      }
      return count;
  }
  void fillParent( unordered_map<Node*, Node*> &parent, Node* root,Node* &start,int target){
      if(root== NULL ){
          return;
      }
      if(root->left != NULL)
      parent[root->left] = root;
      
      
      if(root->right != NULL)
      parent[root->right] = root;
      
      if(target == root->data){
          start = root;
      }
      
      fillParent(parent, root->left,start,target);
      fillParent(parent, root->right,start,target);
  }
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        unordered_map<Node*, Node*> parent;
        Node* start;
        fillParent(parent, root,start,target);
        
        int count = bfs(start,parent);
        
        return count;
    }
};

// { Driver Code Starts.

int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        Solution obj;
        cout<<obj.minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}
  // } Driver Code Ends