class Solution {
public:
    bool safeCheck(vector<vector<int>>& grid,int x,int y){
        if(x<0 || y< 0 || x == grid.size() || y == grid[0].size() || grid[x][y] ==0 || grid[x][y] ==2){
            return false;
        }
        return true;
    }
      int  bfs(vector<vector<int>>&visited, vector<vector<int>>&grid, queue<pair<int,int>>& q){
         
          int count=0 ;
          while(q.size() > 0){ 
          int n = q.size();
              bool check = false;
              for(int z =0; z< n; z++){
                  pair<int,int> temp = q.front();
                  q.pop();
                  int x = temp.first;
                  int y = temp.second;
                  
                  if(safeCheck(grid, x+1,y)&& !visited [x+1][y]){
                      visited [x+1][y] =1;
                      q.push({x+1,y});
                      check = true;
                  } 
                  if(safeCheck(grid, x-1,y) && !visited [x-1][y] ){
                       visited [x-1][y] =1;
                      q.push({x-1,y});
                                            check = true;
                  } 
                  if(safeCheck(grid, x,y+1) && !visited [x][y+1]){
                       visited [x][y+1] =1;
                      q.push({x,y+1});
                                            check = true;
                  } 
                  
                  if(safeCheck(grid, x,y-1) && !visited [x][y-1]){
                       visited [x][y-1] =1;
                      q.push({x,y-1});
                                            check = true;
                  }
              }
              
              if(check){
                  count++;
              }
          }
          return count;
      }
    int orangesRotting(vector<vector<int>>& grid) {
        vector<vector<int>> visited(grid.size(),vector<int> (grid[0].size(),0 ));
        
        int res =0;
        queue<pair<int,int>> q;
        for(int i =0;i< grid.size(); i++){
            for(int j =0 ;j< grid[0].size(); j++){
                if(!visited[i][j] && grid[i][j] == 2){
                    q.push({i,j});
                    visited[i][j]= true;
                    
                }
            }
        }
        res = bfs(visited,grid,q);
        
           for(int i =0;i< grid.size(); i++){
            for(int j =0 ;j< grid[0].size(); j++){
                // cout <<visited[i][j] <<" " ;
                if(!visited[i][j] && grid[i][j] == 1){
                    return -1;
                }
            }
                                  // cout << endl;
        }
        
        return res;
    }
};